// Многопоточность_2.cpp 

/*Потоки с параметрами*/

#include <iostream>
#include <thread>
#include <chrono>

using namespace std;

//создаем функцию принимающую 2 параметров
void doWork(int a, int b) {
    
    this_thread::sleep_for(chrono::milliseconds(1000));
    cout << "====\t" << "doWork started\t====" << endl;
    this_thread::sleep_for(chrono::milliseconds(2000));
    cout << "a+b = " << a + b << endl;
    this_thread::sleep_for(chrono::milliseconds(1000));
    cout << "====\t" << "doWork stopped\t====" << endl;
}
//функция выполнится с задержко1 3 секунд
//это достаточно сложная математическая програма 



int main()
{
    //doWork(2, 8);   функция выполняется в один поток 
    //сщздаем новый поток 
    thread th(doWork, 2, 8);  //способ передачи параметров
    //Таким образом мы можем одновременно выполнять 2 потока 
    //Юсер не будет ругаться из за достаточно большой задержки
    //Это нам дает возможность выполнять другие действия пока функция не выполнится во своем потоке
    //Этот способ полезен при разработки различных приложениий

    //бесконечный цикл для демонстрации работы потока маин 
    for (size_t i = 0;true;i++) {  

        cout << "ID thread = " << this_thread::get_id() << "\t main works\t"<<i<< endl; //получаем доступ к ИД потока 
        this_thread::sleep_for(chrono::milliseconds(500)); //поток выполняется задержкой полтора секунд печатающий номер каждой итерации
  }

    th.join(); //нам этот метод в данной программе ничего не меняет
    //но создавая новый поток мы должны пользоваться либо методом join() либо методом detach()

    return 0;
}

